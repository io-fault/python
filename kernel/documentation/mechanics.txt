The model employed by Kernel is arguably similar to the actor model. However, it adheres
to no formalities and has more, conceptual, parallels with Process Trees in POSIX systems.
A notable departure from abstract messaging systems is that exit signalling is a fixture
in operating Processors.

Kernel intends to isolate runtime state and communications channels from the
designated application state. The goal is to implement runtime patterns so
that applications are essentially arguments, state adapters, to a template tree.

[ Primitives ]

&.core.Processor provides the core interfaces used by a Processing Tree and
&.core.Sector provides the core interfaces for managing sets of executing
Processors.

In isolation, &.core.Processor only offers runtime state management and expects
to be subclassed for specializations. &.core.Sector is similar, but few
patterns are likely to be employed by subclasses.

Is it expected that sets of executing processors will require higher-level state
in order to manage the requirements of an Application Operation. Sectors strictly
provide state on what processors are running and will unconditionally exit when
the last processor is detached due to completion. In error or not.
To compensate for these intended limitations,
&.core.Transaction and &.core.Context are introduced as the primary base classes
for managing Application Operations.

&.core.Transaction instances are sectors associated with a sole &.core.Context instance
managing the execution of subtransactions or distributed processing state. Transactions
intend for Contexts to be the first and last processor executed within the sector, and are
not normally subclassed. Contexts, however, are the primary points of specialization
for managing runtime states.
